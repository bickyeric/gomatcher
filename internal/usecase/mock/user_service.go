// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bickyeric/gomatcher/internal/usecase (interfaces: UserUsecase)
//
// Generated by this command:
//
//	mockgen -destination=mock/user_service.go -package=mock github.com/bickyeric/gomatcher/internal/usecase UserUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	usecase "github.com/bickyeric/gomatcher/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecase) CreateUser(arg0 context.Context, arg1 usecase.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecase)(nil).CreateUser), arg0, arg1)
}

// CreateUserWithPtr mocks base method.
func (m *MockUserUsecase) CreateUserWithPtr(arg0 context.Context, arg1 *usecase.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithPtr", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWithPtr indicates an expected call of CreateUserWithPtr.
func (mr *MockUserUsecaseMockRecorder) CreateUserWithPtr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithPtr", reflect.TypeOf((*MockUserUsecase)(nil).CreateUserWithPtr), arg0, arg1)
}
